package org.example.tgservice.Bot;

import lombok.extern.slf4j.Slf4j;
import org.example.tgservice.BD.Feedback;
import org.example.tgservice.Enum.Role;
import org.example.tgservice.Repo.FeedbackRepo;
import org.example.tgservice.BD.TelegramUser;
import org.example.tgservice.Repo.UserRepo;
import org.example.tgservice.Service.GoogleSheetsService;
import org.example.tgservice.Service.OpenAIService;
import org.example.tgservice.Service.TrelloService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.ResourceAccessException;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import java.time.LocalDateTime;
import java.util.*;

@Component
@Slf4j
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final UserRepo userRepository;
    private final FeedbackRepo feedbackRepo;
    private final OpenAIService openAIService;
    private final GoogleSheetsService googleSheetsService;
    private final TrelloService trelloService;
    private final Map<Long, Integer> loginAttempts = new HashMap<>();
    private final Map<Long, LocalDateTime> blockedUntil = new HashMap<>();
    private final int MAX_ATTEMPTS = 3;
    private final int BLOCK_TIME_MINUTES = 10;
    private final String ADMIN_PASSWROD = System.getenv("ADMIN_PASSWROD");
    private final Set<Long> adminChatIds = new HashSet<>();
    private final Map<Long, Boolean> waitingForPassword = new HashMap<>();


    @Autowired
    public TelegramBot(BotConfig botConfig, UserRepo userRepository, FeedbackRepo feedbackRepo,
                       OpenAIService openAIService, GoogleSheetsService googleSheetsService,
                       TrelloService trelloService) {
        this.botConfig = botConfig;
        this.userRepository = userRepository;
        this.feedbackRepo = feedbackRepo;
        this.openAIService = openAIService;
        this.googleSheetsService = googleSheetsService;
        this.trelloService = trelloService;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();


        // —Ä–µ—Ñ–∞–∫—Ç–æ—Ä—ñ–Ω–≥ –∑–∞–≤–¥—è–∫–∏ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤—ñ—à–∞–º –≤ –Ü–Ω—Ç–µ–ª—ñ–¥–∂, –æ–±–µ—Ä–µ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–ª–∞–≤—ñ—à–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —É –ø—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏
        if (handleAuth(chatId, text)) return; // –∞–≤—Ç–æ—Ä—ñ–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω–∞

        if (adminChatIds.contains(chatId)) {
            if (handleAdminCommands(chatId, text)) return; // –∫–æ–º–∞–Ω–¥–∏ –∞–≤—Ç–æ—Ä—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞
        }

        Optional<TelegramUser> userOpt = userRepository.findByChatId(chatId);
        TelegramUser user;
        if (userOpt.isEmpty()) {
            user = TelegramUser.builder().chatId(chatId).registered(false)
                    .waitingForFeedback(false)
                    .build();
            userRepository.save(user);
            sendMessage(chatId, "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É: –ê–≤—Ç–æ–º–µ—Ö–∞–Ω—ñ–∫, –ê–≤—Ç–æ–µ–ª–µ–∫—Ç—Ä–∏–∫, –î—ñ–∞–≥–Ω–æ—Å—Ç, –ú–æ—Ç–æ—Ä–∏—Å—Ç, " +
                    "–¢—Ä–∞–Ω—Å–º—ñ—Å—ñ–æ–Ω—â–∏–∫, –•–æ–¥–æ–≤–∏–∫, –°–ª—é—Å–∞—Ä –∑ —Ä–µ–º–æ–Ω—Ç—É –∞–≤—Ç–æ, –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–Ω–∏–∫, " +
                    "–ì–∞–∑–æ–≤—â–∏–∫ (–ì–ë–û), –ú–∞–ª—è—Ä, –ö—É–∑–æ–≤—â–∏–∫, –ñ–µ—Å—Ç—è–Ω—â–∏–∫, –°–≤–∞—Ä—â–∏–∫, –ü–æ–ª—ñ—Ä–æ–≤—â–∏–∫, " +
                    "–ú–∞–π—Å—Ç–µ—Ä-–ø—Ä–∏–π–º–∞–ª—å–Ω–∏–∫, –°–µ—Ä–≤—ñ—Å-–º–µ–Ω–µ–¥–∂–µ—Ä, –ö–µ—Ä—ñ–≤–Ω–∏–∫ –°–¢–û, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, –ú–∏–π–Ω–∏–∫, " +
                    "–û—Ü—ñ–Ω—é–≤–∞—á –∑–±–∏—Ç–∫—ñ–≤, –ó–∞–ø—á–∞—Å—Ç–∏–Ω–Ω–∏–∫.");
            return;
        } else {
            user = userOpt.get();
        }

        if (handleRegisterUserAnonim(user, text, chatId)) return; // —Ä–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—è —é–∑–µ—Ä–∞

        handleFeedBackUserAnonim(chatId, text, user);// –ø–µ—Ä–µ–¥–∞—á–∞ –≤—ñ–¥–∫–ª–∏–∫—É –≤—ñ–¥ —é–∑–µ—Ä–∞
    }

    private boolean handleRegisterUserAnonim(TelegramUser user, String text, Long chatId) {
        if (!user.isRegistered()) {
            if (user.getRole() == null) {
                Role role = Role.fromString(text);
                if (role != null) {
                    user.setRole(role.name());
                    userRepository.save(user);
                    sendMessage(chatId, "–î–æ–±—Ä–µ üëç –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó —Ñ—ñ–ª—ñ—ó (–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –°–¢–û).");
                }
                return true;
            }
            else if (user.getBranch() == null) {
                user.setBranch(text);
                user.setRegistered(true);
                user.setWaitingForFeedback(true);
                userRepository.save(user);
                sendMessage(chatId, "–î—è–∫—É—î–º–æ! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ ‚úÖ –ú–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /feedback.");
                return true;
            }
        }
        return false;
    }

    private void handleFeedBackUserAnonim(Long chatId, String text, TelegramUser user) {
        if (!adminChatIds.contains(chatId)) {
            if (text.toLowerCase().startsWith("/feedback")) {
                String feedbackText = null;
                if(text.length()>9){
                    feedbackText = text.substring(9).trim();
                }
                if (feedbackText == null || feedbackText.isEmpty()) {
                    user.setWaitingForFeedback(true);
                    userRepository.save(user);
                    sendMessage(chatId, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:");
                    return;
                }


                Feedback feedback = null;
                try {
                    feedback = openAIService.analyzeFeedback(chatId, feedbackText);
                } catch (HttpClientErrorException | HttpServerErrorException e) {
                    sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –≤—ñ–¥–≥—É–∫—É: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –∑–∞–ø–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ");
                    log.error("OpenAI API returned error", e);
                    return;
                } catch (ResourceAccessException e) {
                    sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫ OpenAI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
                    log.error("OpenAI API not reachable", e);
                    return;
                } catch (Exception e) {
                    sendMessage(chatId, "–í—ñ–¥–±—É–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∞–Ω–∞–ª—ñ–∑—É –≤—ñ–¥–≥—É–∫—É.");
                    log.error("Unknown error while analyzing feedback", e);
                    return;
                }

                feedback.setBranch(user.getBranch());
                feedback.setRole(user.getRole());
                feedbackRepo.save(feedback);

                googleSheetsService.appendFeedback(feedback);
                trelloService.createCard(feedback);

                sendMessage(chatId,
                        "–í–∞—à –≤—ñ–¥–≥—É–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ üôå\n" +
                                "–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: " + feedback.getSentiment() + "\n" +
                                "–ö—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å: " + feedback.getCriticality() + "/5\n" +
                                "–†—ñ—à–µ–Ω–Ω—è: " + feedback.getSuggestion());

                user.setWaitingForFeedback(false);
                userRepository.save(user);
                return;
            }
        }
    }

    private boolean handleAuth(Long chatId, String text) {
        if (waitingForPassword.getOrDefault(chatId, false)) {
            waitingForPassword.remove(chatId);

            int attempts = loginAttempts.getOrDefault(chatId, 0);

            if (blockedUntil.containsKey(chatId)) {
                if (blockedUntil.get(chatId).isAfter(LocalDateTime.now())) {
                    sendMessage(chatId, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                    return true;
                } else {
                    blockedUntil.remove(chatId);
                    loginAttempts.put(chatId, 0);
                }
            }

            if (text.equals(ADMIN_PASSWROD)) {
                loginAttempts.remove(chatId);
                adminChatIds.add(chatId);
                sendMessage(chatId, "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π ‚úÖ. –í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã...");
            } else {
                attempts++;
                loginAttempts.put(chatId, attempts);
                if (attempts >= MAX_ATTEMPTS) {
                    blockedUntil.put(chatId, LocalDateTime.now().plusMinutes(BLOCK_TIME_MINUTES));
                    sendMessage(chatId, "–ó–∞–±–∞–≥–∞—Ç–æ  —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ " + BLOCK_TIME_MINUTES + " –º–∏–Ω—É—Ç.");
                } else {
                    sendMessage(chatId, "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å ‚ùå. –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: " + (MAX_ATTEMPTS - attempts));
                }
            }
            return true;
        }

        if (text.equalsIgnoreCase("/admin")) {
            waitingForPassword.put(chatId, true);
            sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:");
            return true;
        }
        return false;
    }

    private void sendMessage(Long chatId, String text) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(text)
                    .build());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String formatFeedbackList(List<Feedback> feedbacks) {
        if (feedbacks.isEmpty()) return "–ù–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ üòî";
        StringBuilder sb = new StringBuilder();
        for (Feedback f : feedbacks) {
            sb.append("ID: ").append(f.getId()).append("\n")
                    .append("–í—ñ–¥–≥—É–∫: ").append(f.getMessage()).append("\n")
                    .append("–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å: ").append(f.getSentiment()).append("\n")
                    .append("–ö—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å: ").append(f.getCriticality()).append("\n")
                    .append("–†–æ–ª—å/–§—ñ–ª—ñ—è: ").append(f.getRole()).append(", ").append(f.getBranch())
                    .append("\n\n");
        }
        return sb.toString();
    }

    private boolean handleAdminCommands(Long chatId, String text) {
        if (!adminChatIds.contains(chatId)) return false;

        if (text.equalsIgnoreCase("/all")) {
            sendMessage(chatId, formatFeedbackList(feedbackRepo.findAll()));
            return true;
        }
        if (text.toLowerCase().startsWith("/branch ")) {
            String branch = text.substring(8).trim();
            sendMessage(chatId, formatFeedbackList(
                    feedbackRepo.findAll().stream()
                            .filter(f -> f.getBranch().equalsIgnoreCase(branch))
                            .toList()
            ));
            return true;
        }
        if (text.toLowerCase().startsWith("/role ")) {
            String role = text.substring(6).trim();
            sendMessage(chatId, formatFeedbackList(
                    feedbackRepo.findAll().stream()
                            .filter(f -> f.getRole().equalsIgnoreCase(role))
                            .toList()
            ));
            return true;
        }
        if (text.toLowerCase().startsWith("/critical ")) {
            try {
                int lvl = Integer.parseInt(text.substring(10).trim());
                sendMessage(chatId, formatFeedbackList(
                        feedbackRepo.findAll().stream()
                                .filter(f -> f.getCriticality() >= lvl)
                                .toList()
                ));
            } catch (NumberFormatException e) {
                sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏");
            }
            return true;
        }
        return false;
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }
}
